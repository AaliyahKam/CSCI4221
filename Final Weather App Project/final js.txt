document.getElementById('weatherForm').addEventListener('submit', function (e) {
    e.preventDefault();
    const zipcode = document.getElementById('zipcode').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const apiKey = 'a427bbc8bf592bdc3bf75c343b55462b'; // Replace with your OpenWeatherMap API key

    getCoordinates(zipcode, apiKey).then(coordinates => {
        if (coordinates) {
            fetchHistoricalWeatherData(coordinates.lat, coordinates.lon, startDate, endDate, apiKey);
        } else {
            alert('Location not found');
        }
    });
});

async function getCoordinates(zipcode, apiKey) {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${zipcode}&appid=${apiKey}&units=imperial`);
        const data = await response.json();
        if (data.cod === 200) {
            return {
                lat: data.coord.lat,
                lon: data.coord.lon
            };
        } else {
            console.error('Error fetching coordinates:', data.message);
            return null;
        }
    } catch (error) {
        console.error('Error fetching coordinates:', error);
        return null;
    }
}

function fetchHistoricalWeatherData(lat, lon, startDate, endDate, apiKey) {
    const weatherTable = document.getElementById('weatherTable');
    const weatherTableBody = weatherTable.querySelector('tbody');
    weatherTableBody.innerHTML = ''; // Clear previous data

    // Adjust start and end dates to account for local timezone (in seconds)
    const localTimezoneOffset = new Date().getTimezoneOffset() * 60;
    const startTimestamp = (new Date(startDate).getTime() / 1000) + localTimezoneOffset;
    const endTimestamp = (new Date(endDate).getTime() / 1000) + localTimezoneOffset + 86399; // End of the day

    for (let timestamp = startTimestamp; timestamp <= endTimestamp; timestamp += 86400) {
        fetch(`https://history.openweathermap.org/data/2.5/history/city?lat=${lat}&lon=${lon}&type=hour&start=${timestamp}&end=${timestamp + 86399}&appid=${apiKey}&units=imperial`)
            .then(response => response.json())
            .then(data => {
                console.log('Fetched data for timestamp:', new Date(timestamp * 1000).toLocaleString(), 'Data:', data); // Log the timestamp and data
                if (data.list) {
                    displayWeatherData(data, startDate, endDate);
                } else {
                    console.error('No data found for timestamp:', timestamp, 'Response:', data);
                }
            })
            .catch(error => console.error('Error fetching weather data:', error));
    }

    weatherTable.style.display = 'table'; // Show the table
}

function displayWeatherData(data, startDate, endDate) {
    const weatherTableBody = document.getElementById('weatherTable').querySelector('tbody');
    const start = new Date(startDate).getTime() / 1000;
    const end = new Date(endDate).getTime() / 1000 + 86399; // End of the day

    data.list.forEach(item => {
        if (item.dt >= start && item.dt <= end) {
            const date = new Date(item.dt * 1000);
            const temperature = item.main.temp.toFixed(2); // Use the temperature directly in Fahrenheit

            console.log('Date:', date, 'Temperature (F):', temperature, 'Description:', item.weather[0].description);

            const weatherRow = document.createElement('tr');
            weatherRow.innerHTML = `
                <td>${date.toDateString()}</td>
                <td>${date.toLocaleTimeString()}</td>
                <td>${temperature}</td>
                <td>${item.weather[0].description}</td>
            `;
            weatherTableBody.appendChild(weatherRow);
        }
    });
}